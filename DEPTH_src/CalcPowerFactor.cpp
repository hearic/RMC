# include "Depth_Class.h"
const double BarnMev = 1.60217653E-19 ;// 0.60221367*1.60217653E-19;

double Depth_Class::CalcPowerFactor(vector<double> &NucDen)
{ 
	static int RecNucId[56] = 
	{10010, 50100, 80160, 260560, 280580, 400900, 400910, 400920, 400960, 420950, 
	430950, 441010, 451030, 451050, 471090, 541310, 541350, 551330, 551340, 601430, 
	601450, 611470, 611480, 611481, 621470, 621490, 621500, 621510, 621520, 631530, 
	631540, 631550, 902300, 902320, 902330, 912310, 912330, 922320, 922330, 922340, 
	922350, 922360, 922380, 932370, 932390, 942380, 942390, 942400, 942410, 942420, 
	942430, 952410, 952421, 952430, 962440, 962450};

	static double FisQ[56]  = 
	{0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 
	0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 
	0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 0.0000E+00, 
	0.0000E+00, 0.0000E+00, 1.9000E+02, 1.8921E+02, 1.9000E+02, 1.9000E+02, 1.8910E+02, 2.0000E+02, 1.9129E+02, 1.9030E+02, 
	1.9402E+02, 1.9280E+02, 1.9812E+02, 1.9510E+02, 2.0000E+02, 1.9780E+02, 2.0005E+02, 1.9979E+02, 2.0222E+02, 2.0062E+02, 
	2.0000E+02, 2.0230E+02, 2.0229E+02, 2.0210E+02, 2.0000E+02, 2.0000E+02};

	static double CapQ[56]  =
	{2.2250E+00, 2.7900E+00, 4.1430E+00, 7.6000E+00, 9.0200E+00, 7.2030E+00, 8.6350E+00, 6.7580E+00, 5.5710E+00, 9.1540E+00, 
	7.7100E+00, 9.2160E+00, 6.9990E+00, 7.0940E+00, 6.8250E+00, 8.9360E+00, 7.8800E+00, 6.7040E+00, 6.5500E+00, 7.8170E+00, 
	7.5650E+00, 5.9000E+00, 7.2660E+00, 7.2660E+00, 8.1400E+00, 7.9820E+00, 5.5960E+00, 8.2580E+00, 5.8670E+00, 6.4440E+00, 
	8.1670E+00, 6.4900E+00, 5.0100E+00, 4.7860E+00, 6.0800E+00, 5.6600E+00, 5.1970E+00, 5.9300E+00, 6.8410E+00, 5.2970E+00, 
	6.5450E+00, 5.1240E+00, 4.8040E+00, 5.4900E+00, 4.9700E+00, 5.5500E+00, 6.5330E+00, 5.2410E+00, 6.3010E+00, 5.0710E+00, 
	6.0200E+00, 5.5290E+00, 6.4260E+00, 5.3630E+00, 6.4510E+00, 6.1100E+00};

	double qc, qf;
	double qc_sum = 0 , qf_sum = 0 ;
	double capxs, fisxs;
	for(int i = 1; i <= NucNum; ++i)
	{
		int NudId = GetNucId(i);

		//////////////////  binary search ///////////////////////
		int min = 0, max = 55, mid, index = -1;
		if(NudId == RecNucId[min])
		{
			index = min;
		}
		else if(NudId == RecNucId[max])
		{
			index = max;
		}
		else
		{
			while( max - min > 1)
			{
				mid = (min + max)/2;
				if(NudId == RecNucId[mid])
				{
					index = mid;
					break;
				}
				if(NudId > RecNucId[mid])
				{
					min = mid;
				}
				else
				{
					max = mid;
				}
			}
		}

		/////////////////// get qc and qf ///////////////////////
		if(index >= 0)
		{
			qc = CapQ[index];
			qf = FisQ[index];
		}
		else
		{
			qc = 5.0;
			qf = 200.0;
		}

		/////////////////// sum-up recoverable energy ////////////////////
		capxs = GetLibAbsXs(i);
		if(i >= ActinidePos)
		{
			fisxs = GetLibFisXs(i);
			capxs = capxs - fisxs;

			qf_sum = qf_sum + qf*fisxs*NucDen[i];
		}
		qc_sum = qc_sum + qc*capxs*NucDen[i];
	}

	double PowerFactor = (qc_sum + qf_sum )*BarnMev;
	return PowerFactor;

	//Z=GetNucId(i)/10000;
	//A=(GetNucId(i)-Z*10000)/10;
	//XSigR=XSigR+StepNt[STEP-1][i]*LibData[i][22]*(1.29927E-3*Z*Z*sqrt(double(A))+33.12);
}